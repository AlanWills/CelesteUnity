using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Tilemaps;

namespace Celeste.Tilemaps
{
    [Serializable]
    [CreateAssetMenu(fileName = "New Complex Animated Tile", order = CelesteMenuItemConstants.TILEMAPS_MENU_ITEM_PRIORITY, menuName = CelesteMenuItemConstants.TILEMAPS_MENU_ITEM + "Complex Animated Tile")]
    public class ComplexAnimatedTile : TileBase
    {
        protected class ComplexAnimatedTileInstance
        {
            public bool reverse = false;
            public int currentFrame = 0;
            public float currentFrameTime = 0;
            public bool isPlaying = false;
        }

        /// <summary>
        /// The List of Sprites set for the Animated Tile.
        /// This will be played in sequence.
        /// </summary>
        public Sprite[] m_AnimatedSprites;
        /// <summary>
        /// The minimum possible speed at which the Animation of the Tile will be played.
        /// A speed value will be randomly chosen between the minimum and maximum speed.
        /// </summary>
        public float m_Speed = 1f;
        /// <summary>
        /// The Collider Shape generated by the Tile.
        /// </summary>
        public Tile.ColliderType m_TileColliderType;

        public int previewIndex = 0;
        public bool loop = true;
        public bool playImmediately = true;

        private Dictionary<Vector3Int, ComplexAnimatedTileInstance> instances = new Dictionary<Vector3Int, ComplexAnimatedTileInstance>();

        protected ComplexAnimatedTileInstance AddInstance(Vector3Int position)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                instance.currentFrame = 0;
                instance.currentFrameTime = 0;
                instance.isPlaying = playImmediately;
                instance.reverse = false;
            }
            else
            {
                instance = CreateInstance();
                instances.Add(position, instance);
            }
            
            return instance;
        }

        protected ComplexAnimatedTileInstance GetInstance(Vector3Int position)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                return instance;
            }

            return null;
        }

        protected virtual ComplexAnimatedTileInstance CreateInstance()
        {
            ComplexAnimatedTileInstance instance = new ComplexAnimatedTileInstance();
            instance.isPlaying = playImmediately;

            return instance;
        }

        /// <summary>
        /// Retrieves any tile rendering data from the scripted tile.
        /// </summary>
        /// <param name="position">Position of the Tile on the Tilemap.</param>
        /// <param name="tilemap">The Tilemap the tile is present on.</param>
        /// <param name="tileData">Data to render the tile.</param>
        public override void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData)
        {
            tileData.transform = Matrix4x4.identity;
            tileData.color = Color.white;

            if (m_AnimatedSprites == null || m_AnimatedSprites.Length == 0)
            {
                return;
            }

            if (Application.isEditor && !Application.isPlaying)
            {
                tileData.sprite = m_AnimatedSprites[previewIndex];
                return;
            }

            ComplexAnimatedTileInstance instance;
            if (!instances.TryGetValue(position, out instance))
            {
                Debug.LogAssertionFormat("No instance found for position {0} and animated tile {1}", position, name);
                return;
            }

            tileData.sprite = m_AnimatedSprites[instance.currentFrame];
            tileData.colliderType = m_TileColliderType;

            if (instance.isPlaying)
            {
                float timePerFrame = 1 / m_Speed;
                instance.currentFrameTime += Time.deltaTime;

                while (instance.currentFrameTime > timePerFrame && instance.isPlaying)
                {
                    instance.currentFrameTime -= timePerFrame;

                    if (instance.reverse)
                    {
                        --instance.currentFrame;
                        instance.currentFrame = loop ? (int)Mathf.Repeat(instance.currentFrame, m_AnimatedSprites.Length) : Math.Max(instance.currentFrame, 0);
                        instance.isPlaying = loop || instance.currentFrame > 0;
                    }
                    else
                    {
                        ++instance.currentFrame;
                        instance.currentFrame = loop ? instance.currentFrame % m_AnimatedSprites.Length : Math.Min(instance.currentFrame, m_AnimatedSprites.Length - 1);
                        instance.isPlaying = loop || instance.currentFrame < m_AnimatedSprites.Length - 1;
                    }
                }
            }
        }

        public void Play(Vector3Int position)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                instance.isPlaying = true;
            }
            else
            {
                Debug.LogAssertionFormat("No instance found for position {0} and animated tile {1}", position, name);
                return;
            }
        }

        public void Stop(Vector3Int position)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                instance.isPlaying = false;
            }
            else
            {
                Debug.LogAssertionFormat("No instance found for position {0} and animated tile {1}", position, name);
                return;
            }
        }

        public void SetAtStart(Vector3Int position)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                instance.currentFrame = 0;
            }
            else
            {
                Debug.LogAssertionFormat("No instance found for position {0} and animated tile {1}", position, name);
                return;
            }
        }

        public void SetAtEnd(Vector3Int position)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                instance.currentFrame = m_AnimatedSprites.Length - 1;
            }
            else
            {
                Debug.LogAssertionFormat("No instance found for position {0} and animated tile {1}", position, name);
                return;
            }
        }

        public void SetReversed(Vector3Int position, bool reversed)
        {
            if (instances.TryGetValue(position, out ComplexAnimatedTileInstance instance))
            {
                instance.reverse = reversed;
            }
            else
            {
                Debug.LogAssertionFormat("No instance found for position {0} and animated tile {1}", position, name);
                return;
            }
        }
    }
}