pipeline 
{
    agent any
    environment 
    {
        UNITY_PATH = 'C:/Program Files/Unity/Hub/Editor/6000.0.45f1/Editor/Unity.exe'
    }
    stages 
    {
        stage('Setup Parameters') 
        {
            steps 
            {
                script 
                { 
                    properties([
                        buildDiscarder(
                            logRotator(
                                artifactDaysToKeepStr: '', 
                                artifactNumToKeepStr: '', 
                                numToKeepStr: '1')), 
                        parameters([
                            choice(choices: ['Debug', 'Release'], name: 'CONFIGURATION'), 
                            booleanParam(defaultValue: true, name: 'UPLOAD_BUILD'), 
                            booleanParam(defaultValue: true, name: 'UPLOAD_ASSETS')
                        ])
                    ])
                }
            }
        }
        stage('Build')
        {
            steps
            {
                script
                {
                    buildName "Windows-" + CONFIGURATION
                    
                    def methodToInvoke = "CelesteEditor.BuildSystem.BuildPlayer.Build" + params.CONFIGURATION + "WindowsPlayer"
                    def projectPath = WORKSPACE.replace('\\', '/')
                    def unityCommand = "\"${env.UNITY_PATH}\" -quit -batchmode -nographics -executeMethod ${methodToInvoke} -projectPath ${projectPath}"
                                        
                    echo "Executing Unity Build Command: ${unityCommand}"
                    bat unityCommand

                    readProperties(file: "${env.WORKSPACE}/Library/BUILD_ENV_VARS.txt").each {key, value -> env[key] = value }
                    
                    buildName "Windows-" + CONFIGURATION + "-" + env.BUILD_VERSION
                    
                    readProperties(file: "${env.WORKSPACE}/Library/ASSETS_ENV_VARS.txt").each {key, value -> env[key] = value }
                }
            }
        }
        stage('Commit Version')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            steps
            {
                sh "git add ."
                sh 'git commit --allow-empty -m "Built Windows and updating version"'
                sh "git push --set-upstream origin ${env.GIT_BRANCH}"
            }
        }
		stage('Artifact Build')
		{
			steps 
			{
				archiveArtifacts artifacts: '${env.BUILD_LOCATION}/*.*', onlyIfSuccessful: true
			}
		}
		stage('Artifact Assets')
		{
			steps 
			{
				archiveArtifacts artifacts: '${env.ASSETS_SOURCE}/*.*', onlyIfSuccessful: true
			}
		}
        stage('Upload Build')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && params.UPLOAD_BUILD
                }
            }
            steps
            {
                googleStorageUpload(
					bucket: "gs://${env.BUILD_UPLOAD_URL}", 
					credentialsId: "${env.BUILD_UPLOAD_CREDENTIALS}", 
					pattern: "${env.BUILD_LOCATION}",
                    pathPrefix: "${env.BUILD_DIRECTORY}")
            }
        }
        stage('Upload Assets')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && params.UPLOAD_ASSETS
                }
            }
            steps
            {
                googleStorageUpload(
					bucket: "gs://${env.ASSETS_UPLOAD_URL}", 
					credentialsId: "${env.ASSETS_UPLOAD_CREDENTIALS}",  
					pattern: "${env.ASSETS_SOURCE}/*",
                    pathPrefix: "${env.ASSETS_SOURCE}")
                sh "rm -r ${env.ASSETS_SOURCE}"
            }
        }
    }   
}