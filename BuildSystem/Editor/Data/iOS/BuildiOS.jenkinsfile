UNITY_PATH = "C:/Program\\ Files/Unity/Hub/Editor/2022.3.15f1/Editor/Unity.exe"
buildPath = ""
projectPath = ""

pipeline 
{
    agent any
    stages 
    {
        stage('Setup Parameters') 
        {
            steps 
            {
                script 
                { 
                    properties([
                        buildDiscarder(
                            logRotator(
                                artifactDaysToKeepStr: '', 
                                artifactNumToKeepStr: '', 
                                numToKeepStr: '1')), 
                        parameters([
                            choice(choices: ['Debug', 'Release'], name: 'CONFIGURATION'), 
                            booleanParam(defaultValue: true, name: 'UPLOAD_BUILD'), 
                            booleanParam(defaultValue: true, name: 'UPLOAD_ASSETS')
                        ])
                    ])
                }
            }
        }
        stage('Build Unity Project')
        {
            steps
            {
                buildName "iOS-" + CONFIGURATION
                script
                {
                    methodToInvoke = "CelesteEditor.BuildSystem.BuildPlayer.Build" + params.CONFIGURATION + "iOSPlayer"
                    projectPath = WORKSPACE.replace('\\', '/')
                }
                sh UNITY_PATH + ' -quit -batchmode -nographics -executeMethod ' + methodToInvoke + ' -projectPath ' + projectPath
                script 
                {
                    readProperties(file: "${env.WORKSPACE}/Library/BUILD_ENV_VARS.txt").each {key, value -> env[key] = value }
					buildPath = "${projectPath}/${env.BUILD_LOCATION}"
                }
                buildName "iOS-" + CONFIGURATION + "-" + env.BUILD_VERSION
                script 
                {
                    readProperties(file: "${env.WORKSPACE}/Library/ASSETS_ENV_VARS.txt").each {key, value -> env[key] = value }
                }
            }
        }
		stage('Copy iOS Project To Temp Directory')
		{
			when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_TEMP_DIRECTORY == 'True'
                }
            }
			steps
			{
				script
				{
					tempBuildPath = "${env.TEMP_DIRECTORY_PATH}/Build-${env.BUILD_VERSION}-${params.CONFIGURATION}"
					deleteCommand = "/usr/bin/find ${env.TEMP_DIRECTORY_PATH}/* -not -path " + '"' + "${env.TEMP_DIRECTORY_PATH}/builder*" + '" -prune -exec rm -rf {} \\;'
					
					echo "${deleteCommand}"
					sh "${deleteCommand}"
					sh "cp -r ${projectPath}/${env.BUILD_LOCATION} ${tempBuildPath}"
					buildPath = tempBuildPath
				}
			}
		}
        stage('Build iOS Project')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            steps
            {
				script
				{
					buildScript = '"' + "${env.IOS_PROJECT_BUILDER_INSTALL_PATH}/build.cmd" + '" "' + "${buildPath}" + '" -xcname "Unity-iPhone" -xcpname "iPhone-target" -xcconf "Release" -archs "arm64" -multicore -lld -strip bitcode -pngcrush -ipa -identity "' + "${env.DISTRIBUTION_CERTIFICATE}:${env.PRIVATE_KEY}:${env.PRIVATE_KEY_PASSWORD}" + '" -provision "' + "${env.PROVISIONING_PROFILE}" + '"'
					echo "${buildScript}"
					bat "${buildScript}"
				}
            }
        }
		stage('Copy .ipa From Temp Directory')
		{
			when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_TEMP_DIRECTORY == 'True'
                }
            }
			steps
            {
				script
				{
					sh "cp -r ${tempBuildPath}/Packages ${projectPath}/${env.BUILD_LOCATION}/Packages"
				}
            }
		}
        stage('Commit Version')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            steps
            {
                sh "git add ."
                sh 'git commit --allow-empty -m "Built iOS and updating version"'
				sh "git pull origin ${env.GIT_BRANCH} --rebase"
				sh "git lfs push origin ${env.GIT_BRANCH} --all"
                sh "git push --set-upstream origin ${env.GIT_BRANCH}"
            }
        }
		stage('Artifact Build')
		{
			steps 
			{
				archiveArtifacts artifacts: "${env.BUILD_LOCATION}/Packages/${env.IPA_NAME}.ipa", onlyIfSuccessful: true
			}
		}
		stage('Artifact Assets')
		{
			steps 
			{
				archiveArtifacts artifacts: "${env.ASSETS_SOURCE}/*.*", onlyIfSuccessful: true
			}
		}
        stage('Upload Build')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && params.UPLOAD_BUILD
                }
            }
            steps
            {
				script
				{
					ipaWorkspaceLocationForUpload = "${env.BUILD_LOCATION}/Packages/${env.IPA_NAME}.ipa"
					ipaWorkspaceLocationForUpload = ipaWorkspaceLocationForUpload.replace('/', '\\')
					uploadScript = '"' + "${env.IOS_PROJECT_BUILDER_INSTALL_PATH}/upload.cmd" + '" -v "' + "${ipaWorkspaceLocationForUpload}" + '" -asclogin "' + "${env.ASC_USERNAME}" + '" -ascpassword "' + "${env.ASC_PASSWORD}" + '" -ascprovider ""'
					echo "${uploadScript}"
					bat "${uploadScript}"
				}
            }
        }
        stage('Upload Assets')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && params.UPLOAD_ASSETS
                }
            }
            steps
            {
                googleStorageUpload bucket: "gs://${env.ASSETS_DESTINATION}", credentialsId: "${env.ASSETS_UPLOAD_CREDENTIALS}", pattern: "${env.ASSETS_SOURCE}/*"
                sh "rm -r ${env.ASSETS_SOURCE}"
            }
        }
    }   
}