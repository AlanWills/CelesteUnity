UNITY_PATH = "C:/Program\\ Files/Unity/Hub/Editor/2022.3.15f1/Editor/Unity.exe"

pipeline 
{
    agent any
    stages 
    {
        stage('Setup Parameters') 
        {
            steps 
            {
                script 
                { 
                    properties([
                        buildDiscarder(
                            logRotator(
                                artifactDaysToKeepStr: '', 
                                artifactNumToKeepStr: '', 
                                numToKeepStr: '1')), 
                        parameters([
							choice(choices: ['Debug', 'Release'], name: 'CONFIGURATION'),
							choice(choices: ['Apk', 'App Bundle'], name: 'OUTPUT_FILE'),
                            booleanParam(defaultValue: true, name: 'UPLOAD_BUILD_TO_STORAGE'), 
							booleanParam(defaultValue: false, name: 'UPLOAD_BUILD_TO_GOOGLE_PLAY'), 
                            booleanParam(defaultValue: false, name: 'UPLOAD_ASSETS_TO_STORAGE'),
							booleanParam(defaultValue: false, name: 'UPLOAD_STORE_METADATA'),
							booleanParam(defaultValue: false, name: 'UPLOAD_STORE_CHANGE_LOGS'),
							booleanParam(defaultValue: false, name: 'UPLOAD_STORE_IMAGES'),
							booleanParam(defaultValue: false, name: 'UPLOAD_STORE_SCREENSHOTS')
                        ])
                    ])
                }
            }
        }
        stage('Build')
        {
            steps
            {
				script
				{
					configAndOutput = params.CONFIGURATION
					
					if (params.OUTPUT_FILE == 'Apk') {
						configAndOutput = configAndOutput + 'Apk'
					} else {
						configAndOutput = configAndOutput + 'Bundle'
					}
				}
				
                buildName "Android-" + configAndOutput
                script
                {
                    methodToInvoke = "CelesteEditor.BuildSystem.BuildPlayer.Build" + configAndOutput + "AndroidPlayer"
                    projectPath = WORKSPACE.replace('\\', '/')
                }
                sh UNITY_PATH + ' -quit -batchmode -nographics -executeMethod ' + methodToInvoke + ' -projectPath ' + projectPath
                script 
                {
                    readProperties(file: "${env.WORKSPACE}/Library/BUILD_ENV_VARS.txt").each {key, value -> env[key] = value }
                }
                buildName "Android-" + configAndOutput + "-" + env.BUILD_VERSION
                script 
                {
                    readProperties(file: "${env.WORKSPACE}/Library/ASSETS_ENV_VARS.txt").each {key, value -> env[key] = value }
                }
            }
        }
        stage('Commit Version')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            steps
            {
                sh "git add ."
                sh 'git commit --allow-empty -m "Built Android and updating version"'
				sh "git pull origin ${env.GIT_BRANCH} --rebase"
				sh "git lfs push origin ${env.GIT_BRANCH} --all"
                sh "git push --set-upstream origin ${env.GIT_BRANCH}"
            }
        }
		stage('Artifact Build')
		{
			steps 
			{
				archiveArtifacts artifacts: "${env.BUILD_LOCATION}", onlyIfSuccessful: true
			}
		}
		stage('Artifact Assets')
		{
			steps 
			{
				archiveArtifacts artifacts: "${env.ASSETS_SOURCE}/*.*", onlyIfSuccessful: true
			}
		}
        stage('Upload Build To Storage')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && params.UPLOAD_BUILD_TO_STORAGE
                }
            }
            steps
            {
                googleStorageUpload(
					bucket: "gs://${env.BUILD_UPLOAD_URL}", 
					credentialsId: "${env.BUILD_UPLOAD_CREDENTIALS}", 
					pattern: "${env.BUILD_LOCATION}",
                    pathPrefix: "${env.BUILD_DIRECTORY}")
            }
        }
        stage('Upload Build To Google Play')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_FASTLANE && params.UPLOAD_BUILD_TO_GOOGLE_PLAY
                }
            }
            steps
            {
				sh "bundle install"
				sh "bundle exec fastlane upload_aab_to_playstore track:'${env.FASTLANE_UPLOAD_TRACK_NAME}' aab:'${env.BUILD_LOCATION}'"
            }
        }
        stage('Upload Assets To Storage')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && params.UPLOAD_ASSETS_TO_STORAGE
                }
            }
            steps
            {
                googleStorageUpload(
					bucket: "gs://${env.ASSETS_UPLOAD_URL}", 
					credentialsId: "${env.ASSETS_UPLOAD_CREDENTIALS}",  
					pattern: "${env.ASSETS_SOURCE}/*",
                    pathPrefix: "${env.ASSETS_SOURCE}")
                sh "rm -r ${env.ASSETS_SOURCE}"
            }
        }
        stage('Upload Store Metadata To Google Play')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_FASTLANE && params.UPLOAD_STORE_METADATA
                }
            }
            steps
            {
				sh "bundle install"
				sh "bundle exec fastlane upload_metadata_to_playstore track:'${env.FASTLANE_UPLOAD_TRACK_NAME}'"
            }
        }
        stage('Upload Store Change Logs To Google Play')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_FASTLANE && params.UPLOAD_STORE_CHANGE_LOGS
                }
            }
            steps
            {
				sh "bundle install"
				sh "bundle exec fastlane upload_changelogs_to_playstore track:'${env.FASTLANE_UPLOAD_TRACK_NAME}'"
            }
        }
        stage('Upload Store Images To Google Play')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_FASTLANE && params.UPLOAD_STORE_IMAGES
                }
            }
            steps
            {
				sh "bundle install"
				sh "bundle exec fastlane upload_images_to_playstore track:'${env.FASTLANE_UPLOAD_TRACK_NAME}'"
            }
        }
        stage('Upload Store Screenshots To Google Play')
        {
            when
            {
                expression
                {
                    return currentBuild.currentResult == "SUCCESS" && env.USE_FASTLANE && params.UPLOAD_STORE_SCREENSHOTS
                }
            }
            steps
            {
				sh "bundle install"
				sh "bundle exec fastlane upload_screenshots_to_playstore track:'${env.FASTLANE_UPLOAD_TRACK_NAME}'"
            }
        }
    }   
}